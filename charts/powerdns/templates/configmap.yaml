apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "powerdns.fullname" . }}-config
  labels:
    app.kubernetes.io/name: {{ include "powerdns.name" . }}
    helm.sh/chart: {{ include "powerdns.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
data:
  # override powerdns configuration using Values
  01-config.conf: |
    {{ range $key, $value := .Values.powerdns.config -}}
    {{ $key }}={{ $value }}
    {{ end }}

  00-server.conf: |
    api=yes
    {{ if .Values.powerdns.apiKey }}
    api-key={{ .Values.powerdns.apiKey }}
    {{ else }}
    api-key={{ randAlphaNum 24 }}
    {{ end }}
    webserver=yes
    # IP Address of web server to listen on
    webserver-address={{ .Values.powerdns.webserver.address }}
    # Port of web server to listen on
    webserver-port={{ .Values.powerdns.webserver.port }}
    # Web server access is only allowed from these subnets
    webserver-allow-from={{ .Values.powerdns.webserver.allowFrom }}
    # Postgres configuration
    launch=gpgsql
    gpgsql-host={{ .Values.powerdns.postgres.hostname }}
    gpgsql-port={{ .Values.powerdns.postgres.port }}
    gpgsql-dbname={{ .Values.powerdns.postgres.database }}
    gpgsql-user={{ .Values.powerdns.postgres.username }}
    gpgsql-password={{ .Values.powerdns.postgres.password }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "powerdns.fullname" . }}-scripts
  labels:
    app.kubernetes.io/name: {{ include "powerdns.name" . }}
    helm.sh/chart: {{ include "powerdns.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
data:
  setup-powerdns-zone.sh: |
    #!/bin/bash
    set -eou pipefail
    set -x

    apt update
    apt install -y netcat-traditional

    a=0
    while [ $a -lt 100 ]; do
      a=$((a + 1))
      echo "Attempt: ${a}"

      if nc -vz ${POSTGRES_HOSTNAME} ${POSTGRES_PORT}; then
        # if zone already exists, we quit
        pdnsutil list-zone ${POWERDNS_DOMAIN} 2>/dev/null && break
        # else we create it
        pdnsutil create-zone ${POWERDNS_DOMAIN}
      fi
      sleep 5
    done

  init-powerdns-db.sql: |
    CREATE TABLE IF NOT EXISTS domains (
      id                    SERIAL PRIMARY KEY,
      name                  VARCHAR(255) NOT NULL,
      master                VARCHAR(128) DEFAULT NULL,
      last_check            INT DEFAULT NULL,
      type                  VARCHAR(6) NOT NULL,
      notified_serial       BIGINT DEFAULT NULL,
      account               VARCHAR(40) DEFAULT NULL,
      CONSTRAINT c_lowercase_name CHECK (((name)::TEXT = LOWER((name)::TEXT)))
    );

    CREATE UNIQUE INDEX IF NOT EXISTS name_index ON domains(name);


    CREATE TABLE IF NOT EXISTS records (
      id                    BIGSERIAL PRIMARY KEY,
      domain_id             INT DEFAULT NULL,
      name                  VARCHAR(255) DEFAULT NULL,
      type                  VARCHAR(10) DEFAULT NULL,
      content               VARCHAR(65535) DEFAULT NULL,
      ttl                   INT DEFAULT NULL,
      prio                  INT DEFAULT NULL,
      disabled              BOOL DEFAULT 'f',
      ordername             VARCHAR(255),
      auth                  BOOL DEFAULT 't',
      CONSTRAINT domain_exists
      FOREIGN KEY(domain_id) REFERENCES domains(id)
      ON DELETE CASCADE,
      CONSTRAINT c_lowercase_name CHECK (((name)::TEXT = LOWER((name)::TEXT)))
    );

    CREATE INDEX IF NOT EXISTS rec_name_index ON records(name);
    CREATE INDEX IF NOT EXISTS nametype_index ON records(name,type);
    CREATE INDEX IF NOT EXISTS domain_id ON records(domain_id);
    CREATE INDEX IF NOT EXISTS recordorder ON records (domain_id, ordername text_pattern_ops);


    CREATE TABLE IF NOT EXISTS supermasters (
      ip                    INET NOT NULL,
      nameserver            VARCHAR(255) NOT NULL,
      account               VARCHAR(40) NOT NULL,
      PRIMARY KEY(ip, nameserver)
    );


    CREATE TABLE IF NOT EXISTS comments (
      id                    SERIAL PRIMARY KEY,
      domain_id             INT NOT NULL,
      name                  VARCHAR(255) NOT NULL,
      type                  VARCHAR(10) NOT NULL,
      modified_at           INT NOT NULL,
      account               VARCHAR(40) DEFAULT NULL,
      comment               VARCHAR(65535) NOT NULL,
      CONSTRAINT domain_exists
      FOREIGN KEY(domain_id) REFERENCES domains(id)
      ON DELETE CASCADE,
      CONSTRAINT c_lowercase_name CHECK (((name)::TEXT = LOWER((name)::TEXT)))
    );

    CREATE INDEX IF NOT EXISTS comments_domain_id_idx ON comments (domain_id);
    CREATE INDEX IF NOT EXISTS comments_name_type_idx ON comments (name, type);
    CREATE INDEX IF NOT EXISTS comments_order_idx ON comments (domain_id, modified_at);


    CREATE TABLE IF NOT EXISTS domainmetadata (
      id                    SERIAL PRIMARY KEY,
      domain_id             INT REFERENCES domains(id) ON DELETE CASCADE,
      kind                  VARCHAR(32),
      content               TEXT
    );

    CREATE INDEX IF NOT EXISTS domainidmetaindex ON domainmetadata(domain_id);


    CREATE TABLE IF NOT EXISTS cryptokeys (
      id                    SERIAL PRIMARY KEY,
      domain_id             INT REFERENCES domains(id) ON DELETE CASCADE,
      flags                 INT NOT NULL,
      active                BOOL,
      published             BOOL DEFAULT TRUE,
      content               TEXT
    );

    CREATE INDEX IF NOT EXISTS domainidindex ON cryptokeys(domain_id);


    CREATE TABLE IF NOT EXISTS tsigkeys (
      id                    SERIAL PRIMARY KEY,
      name                  VARCHAR(255),
      algorithm             VARCHAR(50),
      secret                VARCHAR(255),
      CONSTRAINT c_lowercase_name CHECK (((name)::TEXT = LOWER((name)::TEXT)))
    );

    CREATE UNIQUE INDEX IF NOT EXISTS namealgoindex ON tsigkeys(name, algorithm);

    GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO powerdns;
    GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO powerdns;

